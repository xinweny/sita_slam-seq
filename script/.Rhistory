sep="\t")
padj.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_padj.txt"),
sep="\t")
# Delete columns
if (length(delete.columns) > 0) {
fc.table <- fc.table[, -which(names(fc.table) %in% delete.columns)]
padj.table <- padj.table[, -which(names(padj.table) %in% delete.columns)]
}
# Convert to matrix
fc.matrix <- data.matrix(fc.table[, 2:ncol(fc.table)])
# Set gene symbol as matrix row names
rownames(fc.matrix) <- fc.table[, 1]
#### Filtering ####
# Convert non-significant gene fold-changes with p < alpha to NA
fc.matrix[which(padj.table[, c(2:ncol(padj.table))] > alpha)] <- 0
fc.matrix[is.na(padj.table[, c(2:ncol(padj.table))])] <- 0
fc.matrix <- fc.matrix[rowSums(abs(fc.matrix) < 5) > 0, ]
fc.matrix
fc.matrix <- fc.matrix[rowSums(abs(fc.matrix) < 5) == ncol(fc.matrix), ]
fc.matrix
#### Packages ####
library(gplots)
library(RColorBrewer)
library(dplyr)
library(glue)
library(dendextend)
#### Functions ####
remove_na_dist <- function(mat) {
dist.mat <- as.matrix(dist(mat))
distNAs <- sum(is.na(dist.mat))
if (distNAs > 0) {
giveNAs <- which(is.na(dist.mat),
arr.ind=TRUE)
tab <- sort(table(c(giveNAs)),
decreasing=TRUE)
checkNA <- sapply(1:length(tab), function(i) {
sum(is.na(as.matrix(dist(mat[-as.numeric(names(tab[1:i])), ]))))})
rmv <- names(tab)[1:min(which(checkNA == 0))]
return(mat[-as.numeric(rmv), ])
} else {
return(mat)
}
}
#### Parameters ####
alpha <- 0.05
cluster.cols <- FALSE
k.cluster.rows <- FALSE
gse <- 'PROJ1624_1'
heatmap.filename <- glue("~/mrc/project/sita_slam-seq/processed/heatmap_{gse}.png")
delete.columns <- c()
#### Load data ####
fc.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_foldChange.txt"),
sep="\t")
padj.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_padj.txt"),
sep="\t")
# Delete columns
if (length(delete.columns) > 0) {
fc.table <- fc.table[, -which(names(fc.table) %in% delete.columns)]
padj.table <- padj.table[, -which(names(padj.table) %in% delete.columns)]
}
# Convert to matrix
fc.matrix <- data.matrix(fc.table[, 2:ncol(fc.table)])
# Set gene symbol as matrix row names
rownames(fc.matrix) <- fc.table[, 1]
#### Filtering ####
# Convert non-significant gene fold-changes with p < alpha to NA
fc.matrix[which(padj.table[, c(2:ncol(padj.table))] > alpha)] <- 0
fc.matrix[is.na(padj.table[, c(2:ncol(padj.table))])] <- 0
fc.matrix <- fc.matrix[rowSums(abs(fc.matrix) < 5) == ncol(fc.matrix), ]
#### Packages ####
library(gplots)
library(RColorBrewer)
library(dplyr)
library(glue)
library(dendextend)
#### Functions ####
remove_na_dist <- function(mat) {
dist.mat <- as.matrix(dist(mat))
distNAs <- sum(is.na(dist.mat))
if (distNAs > 0) {
giveNAs <- which(is.na(dist.mat),
arr.ind=TRUE)
tab <- sort(table(c(giveNAs)),
decreasing=TRUE)
checkNA <- sapply(1:length(tab), function(i) {
sum(is.na(as.matrix(dist(mat[-as.numeric(names(tab[1:i])), ]))))})
rmv <- names(tab)[1:min(which(checkNA == 0))]
return(mat[-as.numeric(rmv), ])
} else {
return(mat)
}
}
#### Parameters ####
alpha <- 0.05
cluster.cols <- FALSE
k.cluster.rows <- FALSE
gse <- 'PROJ1624_1'
heatmap.filename <- glue("~/mrc/project/sita_slam-seq/processed/heatmap_{gse}.png")
delete.columns <- c()
#### Load data ####
fc.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_foldChange.txt"),
sep="\t")
padj.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_padj.txt"),
sep="\t")
# Delete columns
if (length(delete.columns) > 0) {
fc.table <- fc.table[, -which(names(fc.table) %in% delete.columns)]
padj.table <- padj.table[, -which(names(padj.table) %in% delete.columns)]
}
# Convert to matrix
fc.matrix <- data.matrix(fc.table[, 2:ncol(fc.table)])
# Set gene symbol as matrix row names
rownames(fc.matrix) <- fc.table[, 1]
#### Filtering ####
# Convert non-significant gene fold-changes with p < alpha to NA
fc.matrix[which(padj.table[, c(2:ncol(padj.table))] > alpha)] <- 0
fc.matrix[is.na(padj.table[, c(2:ncol(padj.table))])] <- 0
dim(fc.matrix)
fc.matrix <- fc.matrix[rowSums(abs(fc.matrix) < 5) == ncol(fc.matrix), ]
dim(fc.matrix)
#### Packages ####
library(gplots)
library(RColorBrewer)
library(dplyr)
library(glue)
library(dendextend)
#### Functions ####
remove_na_dist <- function(mat) {
dist.mat <- as.matrix(dist(mat))
distNAs <- sum(is.na(dist.mat))
if (distNAs > 0) {
giveNAs <- which(is.na(dist.mat),
arr.ind=TRUE)
tab <- sort(table(c(giveNAs)),
decreasing=TRUE)
checkNA <- sapply(1:length(tab), function(i) {
sum(is.na(as.matrix(dist(mat[-as.numeric(names(tab[1:i])), ]))))})
rmv <- names(tab)[1:min(which(checkNA == 0))]
return(mat[-as.numeric(rmv), ])
} else {
return(mat)
}
}
#### Parameters ####
alpha <- 0.05
cluster.cols <- FALSE
k.cluster.rows <- FALSE
gse <- 'PROJ1624_1'
heatmap.filename <- glue("~/mrc/project/sita_slam-seq/processed/heatmap_{gse}.png")
delete.columns <- c()
#### Load data ####
fc.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_foldChange.txt"),
sep="\t")
padj.table <- read.csv(glue("~/mrc/project/sita_slam-seq/data/{gse}_padj.txt"),
sep="\t")
# Delete columns
if (length(delete.columns) > 0) {
fc.table <- fc.table[, -which(names(fc.table) %in% delete.columns)]
padj.table <- padj.table[, -which(names(padj.table) %in% delete.columns)]
}
# Convert to matrix
fc.matrix <- data.matrix(fc.table[, 2:ncol(fc.table)])
# Set gene symbol as matrix row names
rownames(fc.matrix) <- fc.table[, 1]
#### Filtering ####
# Convert non-significant gene fold-changes with p < alpha to NA
fc.matrix[which(padj.table[, c(2:ncol(padj.table))] > alpha)] <- 0
fc.matrix[is.na(padj.table[, c(2:ncol(padj.table))])] <- 0
fc.matrix <- fc.matrix[rowSums(abs(fc.matrix) < 5) == ncol(fc.matrix), ]
# Remove rows and columns with all NA or 0
#fc.matrix <- fc.matrix[rowSums(is.na(fc.matrix)) != ncol(fc.matrix),
#                       colSums(is.na(fc.matrix)) != nrow(fc.matrix)]
#fc.matrix <- fc.matrix[rowSums(fc.matrix) != 0, ]
# Remove rows giving NA in distance matrix for clustering
# fc.filt.matrix <- remove_na_dist(fc.matrix)
# print(glue("Genes remaining: {nrow(fc.filt.matrix)} out of {nrow(fc.table)}"))
#### Heatmap ####
# Set up colour palette
palette <- colorRampPalette(c("red", "black", "green"))(n=299)
# Clustering on rows and columns
k.rows <- 3
k.cols <- 2
Rowv <- fc.matrix %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k=k.rows) %>%
set("labels_col", k=k.rows) %>%
set("branches_lwd", 4) %>%
rotate_DendSer(ser_weight=dist(fc.matrix))
Colv <- fc.matrix %>% t %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k=k.cols) %>%
set("branches_lwd", 4) %>%
rotate_DendSer(ser_weight=dist(t(fc.matrix)))
# Plot and save static heatmap
png(file=heatmap.filename,
width=3000, height=9000, res=300)
hm <- heatmap.2(fc.matrix,
scale="none",
main=glue("Fold-changes of selected genes (n={nrow(fc.matrix)})
in PROJ1624 comparisons (N={ncol(fc.matrix)}),
p < {alpha}"),
Rowv=if (k.cluster.rows) Rowv else TRUE,
Colv=cluster.cols,
dendrogram=if (cluster.cols) "both" else "row",
srtCol=45, offsetCol=0.5,
cexRow=0.5, cexCol=2,
margins=c(12, 14),
labRow=row.names(fc.matrix),
labCol=gsub("_vs_", " vs. \n", colnames(fc.matrix)),
notecol="black",
density.info="none",
trace="none",
col=palette,
# breaks=seq(-5, 5, length.out=300),
symbreaks=TRUE,
na.color="black",
key=TRUE, keysize=1, lhei=c(1, 15), key.xlab="log2(foldChange)")
hm
dev.off()
png(file=heatmap.filename,
width=3000, height=9000, res=300)
hm <- heatmap.2(fc.matrix,
scale="none",
main=glue("Fold-changes of selected genes (n={nrow(fc.matrix)})
in PROJ1624 comparisons (N={ncol(fc.matrix)}),
p < {alpha}"),
Rowv=if (k.cluster.rows) Rowv else TRUE,
Colv=cluster.cols,
dendrogram=if (cluster.cols) "both" else "row",
srtCol=45, offsetCol=0.5,
cexRow=1, cexCol=2,
margins=c(12, 14),
labRow=row.names(fc.matrix),
labCol=gsub("_vs_", " vs. \n", colnames(fc.matrix)),
notecol="black",
density.info="none",
trace="none",
col=palette,
# breaks=seq(-5, 5, length.out=300),
symbreaks=TRUE,
na.color="black",
key=TRUE, keysize=1, lhei=c(1, 15), key.xlab="log2(foldChange)")
hm
dev.off()
png(file=heatmap.filename,
width=3000, height=9000, res=300)
hm <- heatmap.2(fc.matrix,
scale="none",
main=glue("Fold-changes of selected genes (n={nrow(fc.matrix)})
in PROJ1624 comparisons (N={ncol(fc.matrix)}),
p < {alpha}"),
Rowv=if (k.cluster.rows) Rowv else TRUE,
Colv=cluster.cols,
dendrogram=if (cluster.cols) "both" else "row",
srtCol=45, offsetCol=0.5,
cexRow=1.5, cexCol=2,
margins=c(12, 14),
labRow=row.names(fc.matrix),
labCol=gsub("_vs_", " vs. \n", colnames(fc.matrix)),
notecol="black",
density.info="none",
trace="none",
col=palette,
# breaks=seq(-5, 5, length.out=300),
symbreaks=TRUE,
na.color="black",
key=TRUE, keysize=1, lhei=c(1, 15), key.xlab="log2(foldChange)")
hm
dev.off()
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
library(biomaRt)
})
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("WBGene", genes[1], fixed=TRUE)) {
ensembl <- useMart(biomart = "parasite_mart",
host = "https://parasite.wormbase.org",
port = 443)
ensemblDataset <- "wbps_gene"
symbol <- "external_gene_id"
filter <- "wbps_gene_id"
}
mart <- useDataset(ensemblDataset, ensembl)
geneList <- getBM(filters=filter,
attributes=c(filter, symbol),
values=genes,
mart=mart) %>% distinct(ensembl_gene_id, .keep_all=TRUE)
row.names(geneList) <- geneList[, 1]
geneList[, 1] <- NULL
table$geneSymbol <- geneList[, 1][match(rownames(table), rownames(geneList))]
newTable <- table
return(newTable)
}
format_condition <- function (colnames) {
replace <- c("_[0-9]*$", "_[rR]ep[0-9]*$", "^GSM[0-9]+_", "^[0-9]+_")
for (r in replace) {
colnames <- gsub(r, "", colnames)
}
return(colnames)
}
#### Parameters ####
gse <- "CUS000001"
selectConditions <- c("D1_control", "D1_30minHS") # control vs. treatment
alpha <- 0.05
#### Load data ####
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
if (!(file.exists(glue("processed/{gse}_PCA_exon.png")))) {
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) +
ggtitle(glue("{gse}: Exonic counts"))
# geom_text(aes(label=colnames(rld.ex)), position=position_nudge(y=1))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) +
ggtitle(glue("{gse}: Intronic counts"))
# geom_text(aes(label=colnames(rld.in)), position=position_nudge(y=1))
dev.off()
}
#### Filtering ####
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
paired <- FALSE # Paired samples
alpha <- 0.05
lfcThresh <- 0
# Make column metadata
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Make DESeq2 dataset
dds <- DESeq(dataset)
coef <- tail(resultsNames(dds), n=1)
# Heatmap
# vst <- vst(dds, blind=TRUE)
# png(glue("processed/{gse}_DESeqheatmap_{conditions[1]}.{conditions[2]}.png"))
# print(pheatmap(cor(assay(vst))))
# dev.off()
# Run DESeq2
res <- results(dds, name=coef,
alpha=alpha,
lfcThreshold=lfcThresh,
altHypothesis='greaterAbs',
pAdjustMethod='BH')
summary(res)
message(glue("No. of significant DE genes (FDR < {alpha}): "), sum(res$padj < alpha, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
genes <- row.names(res)
grepl("ENSG", genes[1], fixed=TRUE)
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("WBGene", genes[1], fixed=TRUE)) {
ensembl <- useMart(biomart = "parasite_mart",
host = "https://parasite.wormbase.org",
port = 443)
ensemblDataset <- "wbps_gene"
symbol <- "external_gene_id"
filter <- "wbps_gene_id"
}
mart <- useDataset(ensemblDataset, ensembl)
geneList <- getBM(filters=filter,
attributes=c(filter, symbol),
values=genes,
mart=mart) %>%
distinct(if (ensemblDataset == "wbps_gene") wbps_gene_id else ensembl_gene_id, .keep_all=TRUE)
row.names(geneList) <- geneList[, 1]
geneList[, 1] <- NULL
table$geneSymbol <- geneList[, 1][match(rownames(table), rownames(geneList))]
newTable <- table
return(newTable)
}
format_condition <- function (colnames) {
replace <- c("_[0-9]*$", "_[rR]ep[0-9]*$", "^GSM[0-9]+_", "^[0-9]+_")
for (r in replace) {
colnames <- gsub(r, "", colnames)
}
return(colnames)
}
paired <- FALSE # Paired samples
alpha <- 0.05
lfcThresh <- 0
# Make column metadata
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
if (paired) {
colData <- data.frame(row.names=colnames(exon),
replicate=factor(gsub(".rep", "", colnames(exon)),
levels=seq.int(1:(ncol(exon) / 2))),
condition=factor(cond,
levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ replicate + condition)
} else {
colData <- data.frame(row.names=colnames(exon),
condition=factor(cond, levels=conditions))
dataset <- DESeqDataSetFromMatrix(countData=exon,
colData=colData,
design=~ condition)
}
# Set reference level as control
dataset$condition <- relevel(dataset$condition, ref=conditions[1])
dataset <- dataset[rowSums(counts(dataset)) >= 10, ] # pre-filter genes with no reads
# Make DESeq2 dataset
dds <- DESeq(dataset)
coef <- tail(resultsNames(dds), n=1)
# Heatmap
# vst <- vst(dds, blind=TRUE)
# png(glue("processed/{gse}_DESeqheatmap_{conditions[1]}.{conditions[2]}.png"))
# print(pheatmap(cor(assay(vst))))
# dev.off()
# Run DESeq2
res <- results(dds, name=coef,
alpha=alpha,
lfcThreshold=lfcThresh,
altHypothesis='greaterAbs',
pAdjustMethod='BH')
summary(res)
message(glue("No. of significant DE genes (FDR < {alpha}): "), sum(res$padj < alpha, na.rm=TRUE))
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{gse}_DESeq_{conditions[1]}.{conditions[2]}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(deGenes, padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(deGenes, padj < alpha & log2FoldChange < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
## Visualisation
res <- res[order(-res$padj), ]
# DESeq2 MA plot
DESeq2::plotMA(res, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}"))
png(glue("processed/{gse}_DESeqMAplot_{conditions[1]}.{conditions[2]}.png"))
print(DESeq2::plotMA(res, main=glue("{gse}: {conditions[1]} vs. {conditions[2]}
UP={nUp}, DOWN={nDown}")))
dev.off()
