#### Packages ####
import glob, os
import pandas as pd

#### Functions ####
def get_organism(metadata_path):
    metadata = pd.read_csv(metadata_path, header=0, sep=',')
    organism_name = metadata['Organism'][0]

    return organism_name.replace(' ', '_').lower()

#### Config ####
configfile: "config/config.yaml"
workdir: config['base']
localrules: all, alleyoop_collapse, make_count_tables, alleyoop_summary

PREFIX = f"data/{config['GSE']}"

SAMPLES = [os.path.basename(sample).replace('.fq.gz', '') for sample in glob.glob(f"{PREFIX}/fastq/*.fq.gz")
           if not "trimmed" in os.path.basename(sample)]

if os.path.exists(f"{PREFIX}/SraRunTable_{config['GSE']}.txt"):
    ORGANISM = get_organism(f"{PREFIX}/SraRunTable_{config['GSE']}.txt")
else:
    ORGANISM = config['organism']

#### Workflow ####
rule all:
    input:
        f"{PREFIX}/out/processed/{config['GSE']}_counts_total.txt",
        f"{PREFIX}/out/processed/{config['GSE']}_counts_nascent.txt",
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_overallrates.csv", sample=SAMPLES),
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_overallrates.pdf", sample=SAMPLES),
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_mutationrates_utr.csv", sample=SAMPLES),
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_mutationrates_utr.pdf", sample=SAMPLES)

rule trim_galore:
    input:
        expand(f"{PREFIX}/fastq/{{sample}}.fq.gz", sample=SAMPLES)
    output:
        expand(f"{PREFIX}/fastq/{{sample}}_trimmed.fq.gz", sample=SAMPLES)
    params:
        job_name = f"{config['GSE']}_TRIM"
    resources:
        time_min = 120,
        nodes = 1,
        tasks = 1,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    shell:
        f"trim_galore -j {{resources.cpus}} -o {PREFIX}/fastq --stringency 3 {{input}}"

rule slam_dunk:
    input:
        expand(f"{PREFIX}/fastq/{{sample}}_trimmed.fq.gz", sample=SAMPLES)
    output:
        expand(f"{PREFIX}/out/map/{{sample}}_trimmed.fq_slamdunk_mapped.bam", sample=SAMPLES),
        expand(f"{PREFIX}/out/filter/{{sample}}_trimmed.fq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        expand(f"{PREFIX}/out/snp/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_snp.vcf", sample=SAMPLES),
        expand(f"{PREFIX}/out/count/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    resources:
        time_min = 720,
        nodes = 1,
        tasks = 1,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    params:
        job_name = f"{config['GSE']}_SLAMDUNK",
        fasta = config[ORGANISM]['fasta'],
        bed_utr = config[ORGANISM]['bed_utr']
    conda:
        "envs/slam-seq.yml"
    shell:
        f"""slamdunk all \
        -r {{params.fasta}} \
        -b {{params.bed_utr}} \
        -n 100 -m \
        -5 12 \
        -c 2 \
        -rl 100 \
        -mv 0.2 \
        -mbq 27 \
        -o {PREFIX}/out \
        -t {{resources.cpus}} \
        {{input}}"""

rule alleyoop_collapse:
    input:
        expand(f"{PREFIX}/out/count/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        expand(f"{PREFIX}/out/count/{{sample}}.csv", sample=SAMPLES)
    run:
        for sample in input:
            shell(f"alleyoop collapse -o {PREFIX}/out/count {sample}")

            collapse_out = sample.replace('.tsv', '_collapsed.csv')
            shell(f"mv {collapse_out} {collapse_out.replace('_trimmed.fq_slamdunk_mapped_filtered_tcount_collapsed', '')}")

rule make_count_tables:
    input:
        expand(f"{PREFIX}/out/count/{{sample}}.csv", sample=SAMPLES)
    output:
        total = f"{PREFIX}/out/processed/{config['GSE']}_counts_total.txt",
        nascent = f"{PREFIX}/out/processed/{config['GSE']}_counts_nascent.txt"
    run:
        shell(f"Rscript script/create_count_matrix.R \
        -c {PREFIX}/out/count \
        -g {config['GSE']}")

rule alleyoop_summary:
    input:
        expand(f"{PREFIX}/out/filter/{{sample}}_trimmed.fq_slamdunk_mapped_filtered.bam", sample=SAMPLES)
    output:
        f"{PREFIX}/out/processed/{config['GSE']}_summary.tsv",
        f"{PREFIX}/out/processed/{config['GSE']}_summary_PCA.pdf",
        f"{PREFIX}/out/processed/{config['GSE']}_summary_PCA.txt"
    shell:
        f"alleyoop summary -o {PREFIX}/out/processed/{config['GSE']}_summary.tsv -t {PREFIX}/out/count {{input}}"

rule alleyoop_rates:
    input:
        expand(f"{PREFIX}/out/filter/{{sample}}_trimmed.fq_slamdunk_mapped_filtered.bam", sample=SAMPLES)
    output:
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_overallrates.csv", sample=SAMPLES),
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_overallrates.pdf", sample=SAMPLES)
    resources:
        time_min = 120,
        nodes = 1,
        tasks = 1,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    params:
        job_name = f"{config['GSE']}_RATES",
        fasta = config[ORGANISM]['fasta']
    conda:
        "envs/slam-seq.yml"
    shell:
        f"alleyoop rates -t {{resources.cpus}} \
        -o {PREFIX}/out/processed -r {{params.fasta}} {{input}}"

rule alleyoop_utrrates:
    input:
        expand(f"{PREFIX}/out/filter/{{sample}}_trimmed.fq_slamdunk_mapped_filtered.bam", sample=SAMPLES)
    output:
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_mutationrates_utr.csv", sample=SAMPLES),
        expand(f"{PREFIX}/out/processed/{{sample}}_trimmed.fq_slamdunk_mapped_filtered_mutationrates_utr.pdf", sample=SAMPLES)
    resources:
        time_min = 120,
        nodes = 1,
        tasks = 1,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    params:
        job_name = f"{config['GSE']}_UTRRATES",
        fasta = config[ORGANISM]['fasta'],
        bed_utr = config[ORGANISM]['bed_utr']
    conda:
        "envs/slam-seq.yml"
    shell:
        f"alleyoop utrrates -t {{resources.cpus}} -m --max-read-length 100 \
        -o {PREFIX}/out/processed -r {{params.fasta}} -b {{params.bed_utr}} {{input}}"
